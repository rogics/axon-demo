version: '3.8'

services:

  publisher:
    container_name: demo-publisher
    image: demo-publisher:latest
    ports:
        - "8089:8089"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/publisherdb
      - AXON_DISTRIBUTED_ENABLED=true
      - SPRING_CLOUD_DISCOVERY_ENABLED=true
      - AXON_KAFKA_PUBLISHER_ENABLED=true
      - AXON_KAFKA_FETCHER_ENABLED=true
      - AXON_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
      - eureka.client.serviceUrl.defaultZone=http://eureka:8761/eureka
    depends_on:
      - eureka
      - kafka
      - postgresql
    networks:
      - demo

  subscriber:
    container_name: demo-subscriber
    image: demo-subscriber:latest
    ports:
      - "8099:8099"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/subscriberdb
      - AXON_DISTRIBUTED_ENABLED=true
      - SPRING_CLOUD_DISCOVERY_ENABLED=true
      - AXON_KAFKA_PUBLISHER_ENABLED=true
      - AXON_KAFKA_FETCHER_ENABLED=true
      - AXON_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
      - axon.eventhandling.processors.PaymentOrderSaga.source=streamableKafkaMessageSource
      - axon.eventhandling.processors.PaymentOrderIdempotentSaga.source=streamableKafkaMessageSource
      - eureka.client.serviceUrl.defaultZone=http://eureka:8761/eureka
    depends_on:
      - eureka
      - kafka
      - postgresql
    networks:
      - demo

  postgresql:
    image: postgres
    container_name: demo-postgres
    hostname: demo-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: root
    volumes: 
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    networks: 
      - demo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

 #### Eureka (service registry and discovery)
  eureka:
    image: steeltoeoss/eureka-server
    ports:
      - 8761:8761
    hostname: eureka
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - eureka.client.serviceUrl.defaultZone=http://eureka:8761/eureka
    networks:
      - demo

#### Kafka and related tools
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    networks:
      - demo

  kafka:
    image: wurstmeister/kafka
    ports:
      - 9092:9092
      - 29092:29092
    links:
      - zookeeper
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_PORT: 9092
      KAFKA_LISTENERS:
        INTERNAL://:9092,
        EXTERNAL://:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:
        INTERNAL:PLAINTEXT,
        EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS:
        INTERNAL://kafka:9092,
        EXTERNAL://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - demo

  kafkacat:
    image: confluentinc/cp-kafkacat
    command: sleep infinity

  kafka-rest:
    image: nodefluent/kafka-rest
    ports:
      - 8083:8083
    links:
      - kafka
      - zookeeper
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_REST_HTTP_PORT: 8083
      KAFKA_REST_CONSUMER_METADATA_BROKER_LIST: "kafka:9092"
      KAFKA_REST_PRODUCER_METADATA_BROKER_LIST: "kafka:9092"
    networks:
      - demo

  kafka-rest-ui:
    image: nodefluent/kafka-rest-ui
    ports:
      - 8000:8000
    links:
      - kafka-rest
    depends_on:
      - kafka-rest
    environment:
      REACT_APP_KAFKA_REST_URL: "http://kafka-rest:8083/"
      REACT_APP_TIMEOUT: "3000"
      PROXY: "yes"
      BASIC_AUTH_USER: "admin"
      BASIC_AUTH_PASSWORD: "admin"
    networks:
      - demo

  kowl-ui:
    image: docker.redpanda.com/vectorized/console:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKERS: "kafka:9092"
    networks:
      - demo

networks: 
  demo: